service: product-service

frameworkVersion: '3'

plugins:
  - serverless-webpack
  - serverless-plugin-swagger-ui

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

custom:
  dbCredentials:
    user: ${file(./db.yml):user}
    password: ${file(./db.yml):password}
    host: ${file(./db.yml):host}
    database: ${file(./db.yml):database}
    port: ${file(./db.yml):port}
  swaggerUi:
    s3Bucket: serverless-swagger-ui
    exportType: swagger
    accepts: application/json
    swaggerUiConfig:
      dom_id: '#swagger-ui'
      deepLinking: true
      presets:
        - SwaggerUIBundle.presets.apis
        - SwaggerUIStandalonePreset
      plugins:
        - SwaggerUIBundle.plugins.DownloadUrl
      layout:
        - StandaloneLayout
      supportedSubmitMethods: ["get"]


functions:
  getProducts:
    handler: handler.getProducts
    events:
      - http:
          method: get
          path: /products
          cors: true
    environment:
      DB_USERNAME:  ${self:custom.dbCredentials.user}
      DB_PASSWORD:  ${self:custom.dbCredentials.password}
      DB_NAME:  ${self:custom.dbCredentials.database}
      DB_HOST:  ${self:custom.dbCredentials.host}
      DB_PORT:  ${self:custom.dbCredentials.port}

  getProductById:
    handler: handler.getProductById
    events:
      - http:
          method: get
          path: /products/{id}
          cors: true
    environment:
      DB_USERNAME: ${self:custom.dbCredentials.user}
      DB_PASSWORD: ${self:custom.dbCredentials.password}
      DB_NAME: ${self:custom.dbCredentials.database}
      DB_HOST: ${self:custom.dbCredentials.host}
      DB_PORT: ${self:custom.dbCredentials.port}

  createProduct:
    handler: handler.createProduct
    events:
      - http:
          method: post
          path: /products
          cors: true
          request:
            schemas:
              application/json:
                schema: ${file(./schemas/create-product.json)}
                name: RequestBody
                description: 'Validation model for Creating Products'

    environment:
      DB_USERNAME: ${self:custom.dbCredentials.user}
      DB_PASSWORD: ${self:custom.dbCredentials.password}
      DB_NAME: ${self:custom.dbCredentials.database}
      DB_HOST: ${self:custom.dbCredentials.host}
      DB_PORT: ${self:custom.dbCredentials.port}

resources:
  Resources:
    S3BucketApiDocs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.swaggerUi.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
    S3BucketPolicyApiDocs:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: S3BucketApiDocs
        PolicyDocument:
          Statement:
            - Action:
                - s3:GetObject
              Effect: Allow
              Resource:
                Fn::Sub: arn:aws:s3:::${S3BucketApiDocs}/*
              Principal: '*'
